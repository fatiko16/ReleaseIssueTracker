import { useRouter } from "next/router";
import { useState } from "react";
import Link from "next/link";
import Button from "../../components/button";
import IssuesTable from "../../components/issues-table";
import PausedTCTable from "../../components/pausedTC-table";
import ReleaseInput from "../../components/release-input";
import Head from "next/head";
import domain from "../../constants/domain";
import { useSingleReleaseData, useUpdateReleaseName } from "../../lib/release";
import { useAddNewIssue } from "../../lib/issue";
import { useAddNewPausedTC } from "../../lib/pausedTC";
export default function Release() {
  const router = useRouter();
  const parameters = router.query;
  const releaseId = parameters.releaseId;
  const {
    isLoading,
    isError,
    data,
    status,
    error: fetchSingleReleaseError,
  } = useSingleReleaseData(releaseId);
  console.log(data);
  const [newIssue, setNewIssue] = useState("");
  const [newIssueError, setNewIssueError] = useState(null);
  const [newPausedTCReason, setNewPausedTCReason] = useState("");
  const [newPausedTCTFSId, setNewPausedTCTFSId] = useState("");
  const [newPausedTCError, setNewPausedTCError] = useState(null);

  const { mutate: mutateReleaseName } = useUpdateReleaseName(releaseId);
  const { mutate: addNewIssue } = useAddNewIssue();
  const { mutate: addNewPausedTC } = useAddNewPausedTC();

  async function updateReleaseName(newName, setReleaseNameError) {
    mutateReleaseName(
      { id: Number(releaseId), newName: newName },
      { onSuccess: setReleaseNameError(null) }
    );
  }
  async function addIssue() {
    if (newIssue !== null && newIssue.trim().length > 0) {
      addNewIssue(
        { releaseId: Number(releaseId), name: newIssue },
        {
          onSuccess: () => {
            setNewIssueError(null);
            setNewIssue("");
          },
        }
      );
    } else {
      setNewIssueError("Issue name cannot be empty");
    }
  }

  async function addPausedTC() {
    if (
      newPausedTCReason !== null &&
      newPausedTCReason.length > 0 &&
      newPausedTCTFSId != null &&
      newPausedTCTFSId.length > 0
    ) {
      addNewPausedTC(
        {
          reason: newPausedTCReason,
          tfsId: newPausedTCTFSId,
          releaseId: Number(releaseId),
        },
        {
          onSuccess: () => {
            setNewPausedTCError(null);
            setNewPausedTCReason("");
            setNewPausedTCTFSId("");
          },
        }
      );
    } else {
      setNewPausedTCError("Paused TC Reason or TFS id cannot be empty!");
    }
  }

  return (
    <>
      <Head>
        <title>{data ? data.release.name : "Loading.."}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="w-9/12">
        <Link href={"/"}>
          <a className="text-cyan-300 font-semibold text-2xl hover:text-cyan-500 hover:text-3xl">
            Go Back To Home Page
          </a>
        </Link>

        {data && (
          <ReleaseInput
            initialReleaseName={data.release.name}
            updateReleaseName={updateReleaseName}
          />
        )}

        {!releaseId && (
          <div className="flex justify-center items-center">
            <p className="text-center text-2xl font-semibold text-yellow-300 mt-10">
              Hydrating the release id.
            </p>
          </div>
        )}
      </div>
      <div className="w-full sm:w-9/12">
        <h1 className="text-yellow-300 font-semibold text-2xl my-4 text-start">
          Issues
        </h1>
        <IssuesTable
          issues={data ? data.release.issues : data}
          isLoading={isLoading}
        />
        <div className="mt-4 text-start">
          <label htmlFor="release" className="font-bold">
            Add New Issue:
            <input
              type="text"
              id="new-issue-input"
              className="w-9/12 block mt-2 rounded h-9 px-2 "
              value={newIssue}
              onChange={(e) => setNewIssue(e.target.value)}
            />
          </label>
          {newIssueError && (
            <p className="mt-2 text-red-500 font-bold text-lg">
              {newIssueError}
            </p>
          )}
          <Button
            description="Create"
            type="submit"
            onClick={() => addIssue()}
          />
        </div>
      </div>
      <div className="w-full sm:w-9/12">
        <h1 className="text-yellow-300 font-semibold text-2xl my-4 text-start">
          Paused Test Cases
        </h1>
        <PausedTCTable
          pausedTCs={data ? data.release.pausedTCs : data}
          isLoading={isLoading}
        />
        <div className="mt-4 text-start">
          <label htmlFor="release" className="font-bold">
            TFS ID:
            <input
              type="number"
              id="new-paused-tc-reason"
              className="w-3/12 my-2 rounded h-9 px-2 block"
              value={newPausedTCTFSId}
              onChange={(e) => setNewPausedTCTFSId(e.target.value)}
            />
          </label>
          <label htmlFor="release" className="text-lg font-bold">
            Pause Reason:
            <input
              type="text"
              id="new-paused-tc-reason"
              className="w-9/12 block mt-2 rounded h-9 px-2"
              value={newPausedTCReason}
              onChange={(e) => setNewPausedTCReason(e.target.value)}
            />
          </label>
          {newPausedTCError && (
            <p className="mt-2 text-red-500 font-bold text-lg">
              {newPausedTCError}
            </p>
          )}
          <Button
            description="Create"
            type="submit"
            onClick={() => addPausedTC()}
          />
        </div>
      </div>
    </>
  );
}
