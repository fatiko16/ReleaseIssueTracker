import Head from "next/head";
import Button from "../components/button";
import { useState } from "react";
import ReleaseList from "../components/release-list";
import { useRouter } from "next/router";
import domain from "../constants/domain";
import { getAllReleases } from "../lib/helpers";

export async function getAllReleasesFromAPI() {
  let releases;
  try {
    releases = await fetch(`${domain}/api/release/releases`, {
      headers: {
        "Content-Type": "application/json",
      },
      method: "GET",
    });
  } catch (err) {
    console.log(err);
  }
  return releases;
}

async function fetcher() {
  let allReleases = await getAllReleases();
  return allReleases;
}
export const getStaticProps = async () => {
  const data = await fetcher();
  let allReleases = data;

  return {
    props: {
      allReleases,
    },
    revalidate: 1,
  };
};

export default function Home(props) {
  const router = useRouter();
  const [releases, setReleases] = useState(props.allReleases);
  const [releaseInput, setReleaseInput] = useState("");
  const [error, setError] = useState(null);
  const refreshData = () => {
    router.replace(router.asPath);
  };

  async function createRelease(name) {
    if (releaseInput !== null && releaseInput.length > 0) {
      let response;
      try {
        response = await fetch(`${domain}/api/release/create`, {
          body: JSON.stringify({
            name: name,
          }),
          headers: {
            "Content-Type": "application/json",
          },
          method: "POST",
        });
      } catch (error) {
        console.log(error);
      }
      if (response.ok) {
        setError(null);
        setReleaseInput("");
        const updatedData = await getAllReleasesFromAPI();
        const releases = await updatedData.json();
        setReleases(releases.releases);
      } else {
        if (response.status === 400) {
          const errorData = await response.json();
          setError(errorData.message);
        }
      }
    } else {
      setError("Release name cannot be empty.");
    }
  }

  return (
    <>
      <Head>
        <title>Release Issue Tracker</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="w-10/12 flex items-center justify-center flex-col gap-8">
        <h1 className="text-4xl font-semibold text-yellow-300">
          Release Issue Tracker
        </h1>
        <div className="w-8/12 text-start">
          <label htmlFor="release" className="text-lg font-bold">
            Create a new release:
            <input
              type="text"
              id="release"
              className="w-full mt-2 rounded h-9 px-2"
              required
              value={releaseInput}
              onChange={(e) => setReleaseInput(e.target.value)}
            />
          </label>
          {error && (
            <p className="mt-2 text-red-600 font-semibold text-lg">{error}</p>
          )}
          <Button
            description="Create"
            onClick={() => createRelease(releaseInput)}
            type="button"
          />
        </div>

        <ReleaseList releases={releases} />
      </div>
    </>
  );
}
